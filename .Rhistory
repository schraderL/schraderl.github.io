plot(allEffects(q))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
a<-as.factor(fulldat$Aggression)
chc<-fulldat$CHCdist
queens<-as.factor(fulldat$Queens)
q<-polr(a~chc*queens)
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
a<-as.factor(fulldat$Aggression)
gpsd<-fulldat$GPSdistance
queens<-as.factor(fulldat$Queens)
q<-polr(a~gpsd*queens)
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
gpsd
plot(allEffects(q))
gpsd
is.na(gpsd)
sum(is.na(gpsd))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens=="living queens"))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens=="living queens")
a<-as.factor(sub$Aggression)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd*queens)
plot(allEffects(q))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens")
a<-as.factor(sub$Aggression)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd*queens)
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
plot(allEffects(q))
mean(gpsd)
gpsd
q<-polr(a~gpsd)
q
plot(allEffects(q))
q
summary(q)
length(gpsd)
length(a)
head(sub)
tail(sub)
View(sub)
plot(sub$GPSdistance,sub$CHCdist)
summary(lm(sub$GPSdistance~sub$CHCdist))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0)
a<-as.factor(sub$Aggression)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd)
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
summary(lm(sub$GPSdistance~sub$CHCdist))
plot(sub$GPSdistance~sub$CHCdist)
head(fulldat)
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0 & comb =="Ita-Ita")
a<-as.factor(sub$Aggression)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd)
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0 & comb =="Una-Una")
a<-as.factor(sub$Aggression)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd)
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0)# & comb =="Una-Una")
a<-as.factor(sub$Aggression)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd*comb)
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0)# & comb =="Una-Una")
a<-as.factor(sub$Aggression)
co<-as.factor(sub$comb)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd*comb)
q<-polr(a~gpsd*co)
plot(allEffects(q))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0)# & comb =="Una-Una")
a<-as.factor(sub$Aggression)
co<-as.factor(sub$comb)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
ggplot(sub)+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0 & comb =="Una-Una")
a<-as.factor(sub$Aggression)
co<-as.factor(sub$comb)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
ggplot(sub)+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0 & comb =="Ita-Ita")
a<-as.factor(sub$Aggression)
co<-as.factor(sub$comb)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
ggplot(sub)+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
gps
colonies
gps
do.call(gps,rbind)
do.call(rbind, gps)
df<-do.call(rbind,gps)
df<-data.frame(do.call(rbind,gps))
df
ggplot(df)+geom_point(x=X1,y=X2)
df
df$X1
df$X2
ggplot(df)+geom_point(aes(x=as.numeric(X1),y=as.numeric(X2)))
ggplot(df)+geom_point(aes(x=jitter(as.numeric(X1)),y=jitter(as.numeric(X2))))
ggplot(df)+geom_point(aes(x=jitter(as.numeric(X1)),y=jitter(as.numeric(X2))),alpha=.1
)
df<-data.frame(do.call(rbind,gps))
ggplot(df)+geom_point(aes(x=jitter(as.numeric(X1)),y=jitter(as.numeric(X2))),alpha=.5)
ggplot(df)+geom_point(aes(x=jitter(as.numeric(X1)),y=jitter(as.numeric(X2))),alpha=.5)+xlim(-15.3,-15.2)
ggplot(df)+geom_point(aes(x=jitter(as.numeric(X1)),y=jitter(as.numeric(X2))),alpha=.5)+xlim(-15.3,-15.2)+ylim(-39.05,-39)
25*(1:5)
library(tidyverse)
library(gggenomes)
install.packages("gggenomes")
library(gggenomes)
devtools::install_github("thackl/thacklr")
devtools::install_github("thackl/gggenomes")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
devtools::install_github("thackl/thacklr")
library(ggtree)
devtools::install_github("thackl/thacklr")
library(devtools)
install_github("thackl/thacklr")
library(devtools)
install_github("thackl/thacklr")
install_github("thackl/gggenomes")
BiocManager::install("ggtree")
BiocManager::install("ggtree",forge=TRUE)
BiocManager::install("ggtree",force=TRUE)
install_github("thackl/thacklr")
require(ggplot2)
require(ggbiplot)
require(dplyr)
require("ggrepel")
require(ggnewscale)
require(plyr)
require(MASS)
require("effects")
require(multcomp)
require(ggbeeswarm)
require(cowplot)
require("ggrepel")
require(ggnewscale)
require(tidyr)
# for PCA and plotting
require(FactoMineR)
require(factoextra)
require(cowplot)
require(patchwork) #for assembling the PCA plot
require(coin) #for filgner_test
require(PupillometryR) #for flat violin
#chcdat<-read.csv("../data/Mastertable_cardios.csv",sep=",",dec=",", stringsAsFactors = FALSE)
#chcdat<-read.csv("~/Desktop/Cardio_Paper/0_data/manual/Mastertable_cardios.csv",sep=",",dec=",", stringsAsFactors = FALSE)
#setwd("~/Desktop/Cardio_Paper")
chcdat<-read.csv("Cobs_Mastertable_15062022.csv",sep=";",dec=",", stringsAsFactors = FALSE)
# get rid of NAs in CHC data
chcdat[8:96][is.na(chcdat[,8:96])]<- 0
# remove ".Results" endings in header
names(chcdat) = gsub(pattern = ".Results", replacement = "", x = names(chcdat))
# Remove "X" from names
names(chcdat) = gsub(pattern = "X", replacement = "", x = names(chcdat))
# rename column 77 to  (X13.17...15.17DiMeC31....5MeC31.)
#chcdat$X13.17...15.17DiMeC31<- chcdat[,77]
# remove column 77
#chcdat<- subset(chcdat[-c(77) ])
# standardization with internal C12-STD to compensate deviations caused by injection volume
chcdatng	<- chcdat[,9:96] / chcdat[,8] # internal Standard is here 8. column
# combine absolute nanogram amounts and sample information from chcdat
chcdatabs1<-cbind(chcdat[,1:7],chcdatng) # sample information from 1:9
# remove all CHC <C19
chcdatabs<-subset(chcdatabs1[-c(8:24) ])
# all queen colonies
allchcdatabs1<-subset(chcdatabs, Caste == "queen ")
#allchcdatabs<-subset(allchcdatabs1[-c(22:24), ])
# only queen and worker (BR)
workerdataabs<-subset(chcdatabs, Caste %in% c("queen ","worker"))
workerdat1<-subset(workerdataabs, Population  %in% c("Una","Ita"))
workerdatabs <- subset(workerdat1, !is.na(workerdat1$Col.caste))
# only workers and only queens
workers<-subset(workerdatabs, Caste %in% c("worker"))
queens<-subset(workerdatabs, Caste %in% c("queen "))
# manipulated and untreated queens
washdatabs<-subset(chcdatabs, Caste %in% c("dead queen"))
#washdatabs<-subset(washdataabs[-c(4,6:9,18,25,42)])
# remove all CHC <C19
chcdatrel1<-subset(chcdat[-c(8:25) ])
# relative responses
chcdatrel2	<- chcdatrel1[,8:78] / rowSums(chcdatrel1[,8:78])
# combine nanogram amounts and sample information from chcdat
chcdatrel<-cbind(chcdat[,1:7],chcdatrel2)
# all queen colonies
allchcdatrel1<-subset(chcdatrel, Caste == "queen ")
#allchcdatrel<-subset(allchcdatrel1[-c(22:24), ])
# only queen and worker (BR)
workerdatarel<-subset(chcdatrel, Caste %in% c("queen ","worker"))
workerdatrel1<-subset(workerdatarel, Population  %in% c("Una","Ita"))
workerdatrel<-subset(workerdatrel1, !is.na(workerdat1$Col.caste))
# manipulated and untreated queens
washdatrel<-subset(chcdatrel, Caste %in% c("dead queen"))
#washdatrel<-subset(washdatarel[-c(4,6:9,18,25,42)])
# all treatments
alltreat<- rbind(workerdatrel,washdatrel)
alltreat$Treatment[is.na(alltreat$Treatment)] <- "washed" # Lukas: I changed this from: alltreat$Treatment[is.na[,]]<- "washed" with
## 3.1 Absolute CHC mass
# for queens and workers
workerqueen <- colnames (workerdatabs)
# Alkanes
alk<- workerqueen %in% grep("n.C", workerqueen, value= TRUE)
Alk<- subset(workerdatabs, select= alk)
Alkanes<-cbind(workerdatabs[c("Caste")],Alk)
df<-tidyr::gather(Alkanes,key="chc",value="Value",-Caste,-Origin.Colony)
dfAlkanes<-df
dfAlkanes$group<-"Alkanes"
# have a look at the boxplots
#h<-ggplot(df, aes(x=Treatment, y=Value)) + geom_boxplot(alpha=0.3) +theme_classic()
#h + facet_wrap( ~ chc, ncol=4,scales = "free")
#ggplot(df, aes(fill=chc, y=Value, x=Origin.Colony)) + geom_bar(position="fill", stat="identity")
# Alkenes
alke<- workerqueen %in% grep("pattern=[0-9]ene|[0-9].ene", workerqueen, value= TRUE)
Alke<- subset(workerdatabs, select= alke)
Alkenes<-cbind(workerdatabs[c("Origin.Colony","Caste")],Alke)
df<-tidyr::gather(Alkenes,key="chc",value="Value",-Caste,-Origin.Colony)
dfAlkenes<-df
dfAlkenes$group<-"Alkenes"
# Monomethyl
me<-workerqueen %in% grep(pattern="[0-9].Me|[0-9]Me", workerqueen, value= TRUE)
Me<- subset(workerdatabs, select= me)
Monomethyl<-cbind(workerdatabs[c("Origin.Colony","Caste")],Me)
df<-tidyr::gather(Monomethyl,key="chc",value="Value",-Caste,-Origin.Colony)
dfMonomethyl<-df
dfMonomethyl$group<-"Methylalkanes"
# Dimethyl
di<-workerqueen %in% grep(".DiMe", workerqueen, value= TRUE)
Di<- subset(workerdatabs, select= di)
Dimethyl<-cbind(workerdatabs[c("Origin.Colony","Caste")],Di)
df<-tidyr::gather(Dimethyl,key="chc",value="Value",-Caste,-Origin.Colony)
dfDimethyl<-df
dfDimethyl$group<-"Dimethylalkanes"
# Trimethyl
tri<-workerqueen %in% grep(".Tri", workerqueen, value= TRUE)
Tri<- subset(workerdatabs, select= tri)
Trimethyl<-cbind(workerdatabs[c("Origin.Colony","Caste")],Tri)
df<-tidyr::gather(Trimethyl,key="chc",value="Value",-Caste,-Origin.Colony)
dfTrimethyl<-df
dfTrimethyl$group<-"Trimethylalkanes"
# Dienes
die<-workerqueen %in% grep("diene", workerqueen, value= TRUE)
Die<- subset(workerdatabs, select= die)
Dienes<-cbind(workerdatabs[c("Origin.Colony","Caste")],Die)
df<-tidyr::gather(Dienes,key="chc",value="Value",-Caste,-Origin.Colony)
dfDienes<-df
dfDienes$group<-"Alkadienes"
# combine classes
dfall1<-rbind(dfAlkenes, dfAlkanes, dfMonomethyl, dfDimethyl, dfTrimethyl, dfDienes)
dfall_new <- dfall1 %>%
dplyr::group_by(group,Caste) %>%
dplyr::summarise(Values = sum(Value))
# plot Barplot
p <- ggplot(dfall_new, aes(fill=group, y=Values, x=Caste)) +
geom_bar(stat="identity") +
theme_classic(base_size = 16) +  # white background
theme(axis.title.x = element_blank(), axis.title.y = element_text(color = "black", size=14, face="bold")) +
theme(legend.title =element_blank(), legend.text = element_text(color = "black", size = 14)) +
scale_x_discrete(guide= guide_axis(n.dodge = 1)) +
NULL +
scale_fill_brewer(palette="Oranges")+
ylab("absolute CHC mass (ng)") # check if that is the correct axis label
#facet_grid(.~Caste, scales = "free")
p
#setwd("~Desktop/Cardio_Paper/3_output")
dev.print(pdf,"Cardio_QW_absoluteMass.pdf",width=5, height=3)
p
#setwd("~Desktop/Cardio_Paper/3_output")
dev.print(pdf,"Cardio_QW_absoluteMass1.pdf",width=5, height=3)
p
#setwd("~Desktop/Cardio_Paper/3_output")
dev.print(pdf,"~/Downloads/Cardio_QW_absoluteMass1.pdf",width=5, height=3)
library(tidyverse)
library(MASS)
library(DHARMa)
library(lme4)
library(ggbeeswarm)
library(zoo)
library(ggpubr)
df<-read_delim("/Users/lukas/Downloads/Diversity.RecombinationRate.Corr.100kb (1).txt")
#df$Pi[df$region=="TE islands"]<-NA
#df$rr[df$region=="TE islands"]<-NA
# split by pop, scaffold and TEisl/LDR
df.list <- df %>% split(f=list(df$statPop,df$scaffold,df$region))
# run rollapply over each list element to calulate rolling means
# rolling windows don't make sense for TE islands, because they are so short anyway.
df.list2<-lapply(df.list, function(x) x %>%
mutate(PiMb=rollapply(Pi,5,mean,align='center',fill=NA,by=1,na.rm=T),
RRMb=rollapply(rr,5,mean,align='center',fill=NA,by=1,na.rm=T),
TEMb=rollapply(te,5,mean,align='center',fill=NA,by=1,na.rm=T)))
# bind list elements
df.roll<-do.call(rbind, df.list2)
# remove rolling windows with NAs and bin rolling window RR, non-rolling-window RR and TE content.
df.bin<-df.roll  %>% subset(!is.na(RRMb)) %>% mutate( bin.rr = cut( RRMb, breaks = c(-1,0,1,5,10,15,20,200)),bin.te = cut( te, breaks = seq(0,1,by=.1)),bin.rr.raw = cut( rr, breaks = c(-1,0,1,5,10,15,20,200)))
# add TE island as one bin in the rolling windo RR bin
df.bin$bin.rr<-as.character(df.bin$bin.rr)
df.bin$bin.rr[df.bin$region=="TE islands"]<-"TE island"
df.bin$bin.rr<-as.factor(df.bin$bin.rr)
#rearrange factor levels
df.bin$bin.rr<-factor(df.bin$bin.rr,levels= c("TE island", head(levels(df.bin$bin.rr),-1)))
# rearrange and rename statPop levels
df.bin$statPop<-factor(df.bin$statPop,levels= c("pi_G","pi_U","pi_I","pi_TW","pi_TN","pi_LD"),labels=c("Gua","Una","Ita","Tai","Ten","Led"))
# plot and subset to some relevant regions (i.e. no introgression)
p1<-df.bin %>% subset(RRMb != "NA" &
introgression=="no" &
gap2 =="no" &
statPop %in% c("Una","Ita","Tai","Ten","Led")
) %>%
ggplot(.,aes(x=bin.rr,y=log(PiMb,10)))+
facet_grid(~statPop)+
geom_quasirandom(alpha=.2,size=.1,aes(col=region,fill=region))+
geom_boxplot(aes(col=region,fill=region),alpha=.2,outlier.colour = NA,width=.2)+
geom_smooth(method = "loess", se=TRUE, aes(group=region),size=.5,col="red2",fill="red")+
scale_color_manual(values=c("steelblue","orange"))+
scale_fill_manual(values=c("steelblue","orange"))+
scale_x_discrete(name ="binned RR [cM/Mb]",
labels=c("TE islands","0","0-1","1-5","5-10","10-15","15-20",">20"))+
ylab(expression(paste("nucleotide diversity (",pi,")")))+
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1),legend.position = "none")
p1
df<-read_delim("/Users/lukas/Downloads/Diversity.RecombinationRate.Corr.100kb (1).txt")
#df$Pi[df$region=="TE islands"]<-NA
#df$rr[df$region=="TE islands"]<-NA
# split by pop, scaffold and TEisl/LDR
df.list <- df %>% split(f=list(df$statPop,df$scaffold,df$region))
# run rollapply over each list element to calulate rolling means
# rolling windows don't make sense for TE islands, because they are so short anyway.
df.list2<-lapply(df.list, function(x) x %>%
mutate(PiMb=rollapply(Pi,5,mean,align='center',fill=NA,by=5,na.rm=T),
RRMb=rollapply(rr,5,mean,align='center',fill=NA,by=5,na.rm=T),
TEMb=rollapply(te,5,mean,align='center',fill=NA,by=5,na.rm=T)))
# bind list elements
df.roll<-do.call(rbind, df.list2)
# remove rolling windows with NAs and bin rolling window RR, non-rolling-window RR and TE content.
df.bin<-df.roll  %>% subset(!is.na(RRMb)) %>% mutate( bin.rr = cut( RRMb, breaks = c(-1,0,1,5,10,15,20,200)),bin.te = cut( te, breaks = seq(0,1,by=.1)),bin.rr.raw = cut( rr, breaks = c(-1,0,1,5,10,15,20,200)))
# add TE island as one bin in the rolling windo RR bin
df.bin$bin.rr<-as.character(df.bin$bin.rr)
df.bin$bin.rr[df.bin$region=="TE islands"]<-"TE island"
df.bin$bin.rr<-as.factor(df.bin$bin.rr)
#rearrange factor levels
df.bin$bin.rr<-factor(df.bin$bin.rr,levels= c("TE island", head(levels(df.bin$bin.rr),-1)))
# rearrange and rename statPop levels
df.bin$statPop<-factor(df.bin$statPop,levels= c("pi_G","pi_U","pi_I","pi_TW","pi_TN","pi_LD"),labels=c("Gua","Una","Ita","Tai","Ten","Led"))
# plot and subset to some relevant regions (i.e. no introgression)
p1<-df.bin %>% subset(RRMb != "NA" &
introgression=="no" &
gap2 =="no" &
statPop %in% c("Una","Ita","Tai","Ten","Led")
) %>%
ggplot(.,aes(x=bin.rr,y=log(PiMb,10)))+
facet_grid(~statPop)+
geom_quasirandom(alpha=.2,size=.1,aes(col=region,fill=region))+
geom_boxplot(aes(col=region,fill=region),alpha=.2,outlier.colour = NA,width=.2)+
geom_smooth(method = "loess", se=TRUE, aes(group=region),size=.5,col="red2",fill="red")+
scale_color_manual(values=c("steelblue","orange"))+
scale_fill_manual(values=c("steelblue","orange"))+
scale_x_discrete(name ="binned RR [cM/Mb]",
labels=c("TE islands","0","0-1","1-5","5-10","10-15","15-20",">20"))+
ylab(expression(paste("nucleotide diversity (",pi,")")))+
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1),legend.position = "none")
p1
df<-read_delim("/Users/lukas/Downloads/Diversity.RecombinationRate.Corr.100kb (1).txt")
#df$Pi[df$region=="TE islands"]<-NA
#df$rr[df$region=="TE islands"]<-NA
# split by pop, scaffold and TEisl/LDR
df.list <- df %>% split(f=list(df$statPop,df$scaffold,df$region))
# run rollapply over each list element to calulate rolling means
# rolling windows don't make sense for TE islands, because they are so short anyway.
df.list2<-lapply(df.list, function(x) x %>%
mutate(PiMb=rollapply(Pi,2,mean,align='center',fill=NA,by=2,na.rm=T),
RRMb=rollapply(rr,2,mean,align='center',fill=NA,by=2,na.rm=T),
TEMb=rollapply(te,2,mean,align='center',fill=NA,by=2,na.rm=T)))
# bind list elements
df.roll<-do.call(rbind, df.list2)
# remove rolling windows with NAs and bin rolling window RR, non-rolling-window RR and TE content.
df.bin<-df.roll  %>% subset(!is.na(RRMb)) %>% mutate( bin.rr = cut( RRMb, breaks = c(-1,0,1,5,10,15,20,200)),bin.te = cut( te, breaks = seq(0,1,by=.1)),bin.rr.raw = cut( rr, breaks = c(-1,0,1,5,10,15,20,200)))
# add TE island as one bin in the rolling windo RR bin
df.bin$bin.rr<-as.character(df.bin$bin.rr)
df.bin$bin.rr[df.bin$region=="TE islands"]<-"TE island"
df.bin$bin.rr<-as.factor(df.bin$bin.rr)
#rearrange factor levels
df.bin$bin.rr<-factor(df.bin$bin.rr,levels= c("TE island", head(levels(df.bin$bin.rr),-1)))
# rearrange and rename statPop levels
df.bin$statPop<-factor(df.bin$statPop,levels= c("pi_G","pi_U","pi_I","pi_TW","pi_TN","pi_LD"),labels=c("Gua","Una","Ita","Tai","Ten","Led"))
# plot and subset to some relevant regions (i.e. no introgression)
p1<-df.bin %>% subset(RRMb != "NA" &
introgression=="no" &
gap2 =="no" &
statPop %in% c("Una","Ita","Tai","Ten","Led")
) %>%
ggplot(.,aes(x=bin.rr,y=log(PiMb,10)))+
facet_grid(~statPop)+
geom_quasirandom(alpha=.2,size=.1,aes(col=region,fill=region))+
geom_boxplot(aes(col=region,fill=region),alpha=.2,outlier.colour = NA,width=.2)+
geom_smooth(method = "loess", se=TRUE, aes(group=region),size=.5,col="red2",fill="red")+
scale_color_manual(values=c("steelblue","orange"))+
scale_fill_manual(values=c("steelblue","orange"))+
scale_x_discrete(name ="binned RR [cM/Mb]",
labels=c("TE islands","0","0-1","1-5","5-10","10-15","15-20",">20"))+
ylab(expression(paste("nucleotide diversity (",pi,")")))+
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1),legend.position = "none")
p1
