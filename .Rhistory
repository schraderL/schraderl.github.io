kbl(news.df, caption = NULL,row.names = F,col.names = NULL)  %>%
kable_minimal(html_font = "Arial",font_size = 10) %>%
column_spec(1, width = "15px",latex_valign = "m", italic = TRUE,extra_css = "vertical-align:middle;") %>%
scroll_box(height = "600px")
library(dplyr)
library(kableExtra)
news.df<-read.csv("posts.tsv",sep="\t",F)
kbl(news.df, caption = NULL,row.names = F,col.names = NULL)  %>%
kable_minimal(html_font = "Arial",font_size = 10) %>%
column_spec(1, width = "15px",latex_valign = "m", italic = TRUE,extra_css = "vertical-align:top;") %>%
scroll_box(height = "600px")
library(dplyr)
library(kableExtra)
news.df<-read.csv("posts.tsv",sep="\t",F)
kbl(news.df, caption = NULL,row.names = F,col.names = NULL)  %>%
kable_minimal(html_font = "Arial",font_size = 12) %>%
column_spec(1, width = "15px",latex_valign = "m", italic = TRUE,extra_css = "vertical-align:top;") %>%
scroll_box(height = "600px")
library(dplyr)
library(kableExtra)
news.df<-read.csv("posts.tsv",sep="\t",F)
kbl(news.df, caption = NULL,row.names = F,col.names = NULL)  %>%
kable_minimal(html_font = "Arial",font_size = 12) %>%
kable_styling(bootstrap_options = "bordered") %>%
column_spec(1, width = "15px",latex_valign = "m", italic = TRUE,extra_css = "vertical-align:top;") %>%
scroll_box(height = "600px")
require(ggplot2)
#library(ggbiplot)
require(plyr)
require("ggrepel")
require(ggnewscale)
require(plyr)
require(MASS)
require("effects")
require(multcomp)
require(knitr) #for including tables
# read aggression
dat<-read.csv("../data/AggressionResults_all.csv",sep=";")
#dat<-read.csv("~/Desktop/Cardio_Paper/0_data/manual/AggressionResults_all.csv",sep=";")
# modifiying data
dat<-tidyr::separate(dat,Combination,c("Intruder","Recipient"),sep=" *- *")
dat$IntruderPop<-as.factor(gsub("([A-z]+?)\\ .*","\\1", dat$Intruder))
#dat$Recipient<-as.factor(gsub("\\s","",dat$Recipient,perl=T)) # remove whitespaces
dat$Recipient<-as.factor(gsub("[^A-J]","",dat$Recipient,perl=T)) #remove whitespaces
# change Recipients
dat$RecipientCol<-as.factor(gsub(" ","",dat$Recipient)) # remove spaces
levels(dat$RecipientCol)[levels(dat$RecipientCol)=="A"]<-"Una080"
levels(dat$RecipientCol)[levels(dat$RecipientCol)=="B"]<-"Una054"
levels(dat$RecipientCol)[levels(dat$RecipientCol)=="C"]<-"Ita014"
levels(dat$RecipientCol)[levels(dat$RecipientCol)=="D"]<-"Ita025"
levels(dat$RecipientCol)[levels(dat$RecipientCol)=="E"]<-"Ita013"
levels(dat$RecipientCol)[levels(dat$RecipientCol)=="F"]<-"Una081"
levels(dat$RecipientCol)[levels(dat$RecipientCol)=="G"]<-"Ita024"
levels(dat$RecipientCol)[levels(dat$RecipientCol)=="H"]<-"Una082"
levels(dat$RecipientCol)[levels(dat$RecipientCol)=="I"]<-"Una007"
levels(dat$RecipientCol)[levels(dat$RecipientCol)=="J"]<-"Ita015"
dat$RecipientPop<-as.factor(gsub(" ","",dat$Recipient)) # remove spaces
levels(dat$RecipientPop)[levels(dat$RecipientPop)=="A"]<-"Una"
levels(dat$RecipientPop)[levels(dat$RecipientPop)=="B"]<-"Una"
levels(dat$RecipientPop)[levels(dat$RecipientPop)=="C"]<-"Ita"
levels(dat$RecipientPop)[levels(dat$RecipientPop)=="D"]<-"Ita"
levels(dat$RecipientPop)[levels(dat$RecipientPop)=="E"]<-"Ita"
levels(dat$RecipientPop)[levels(dat$RecipientPop)=="F"]<-"Una"
levels(dat$RecipientPop)[levels(dat$RecipientPop)=="G"]<-"Ita"
levels(dat$RecipientPop)[levels(dat$RecipientPop)=="H"]<-"Una"
levels(dat$RecipientPop)[levels(dat$RecipientPop)=="I"]<-"Una"
levels(dat$RecipientPop)[levels(dat$RecipientPop)=="J"]<-"Ita"
# add combination of Una+Ita
dat$comb<-paste(dat$IntruderPop,dat$RecipientPop,sep="-")
#write.csv(dat,"/Library/Interner_Speicher/Uni/Cardiocondyla.obscurior/FGM.CardioAssays/behavData.csv", row.names = TRUE,quote = F)
# dataframe without own colony
datnoown<- subset(dat,Treatment %in% c("different Pop","same Pop"))
# Count number of scores in trials
# remove manipulated from dat
df <- subset(dat,Queens %in% c("living queens","untreated queens", "washed queens"))
score1 <- sum(df$Aggression == 1)
score2 <- sum(df$Aggression == 2)
score3 <- sum(df$Aggression == 3)
score4 <- sum(df$Aggression == 4)
score5 <- sum(df$Aggression == 5)
# only washed
df1 <- subset(dat,Queens %in% c("washed queens"))
score11 <- sum(df1$Aggression == 1)
# only untreated
df2 <- subset(dat,Queens %in% c("untreated queens"))
score12 <- sum(df2$Aggression == 1)
# only living
df3 <- subset(dat,Queens %in% c("living queens"))
score13 <- sum(df3$Aggression == 1)
chcdata<-read.csv("../data/Mastertable_cardios.csv",sep=",",dec=",", stringsAsFactors = FALSE)
#chcdata<-read.csv("~/Desktop/Cardio_Paper/0_data/manual/Mastertable_cardios.csv",sep=",",dec=",", stringsAsFactors = FALSE)
# remove all CHC <C19
chcdat<-subset(chcdata[-c(8:25) ])
#relative responses
chcdatng	<- chcdat[,8:77] / rowSums(chcdat[,8:77])
#combine nanogram amounts and sample information from chcdat
chcdatng<-cbind(chcdat[,1:7],chcdatng)
## splitting up the data
# only queen and worker (BR) for PCA
workerdata<-subset(chcdatng, Caste %in% c("queen ","worker"))
workerdat1<- subset(workerdata, Population %in% c("Ita", "Una"))
workerdat <- subset(workerdat1, !is.na(workerdat1$Col.caste))
#queendat<- subset(workerdat, Caste%in% c("queen "))
#wdat<-subset(workerdat, Caste%in% c("worker"))
#split up the data for distant calculation
# all data
distdat1<-workerdat[c(1,2,8:77)]
# only queens
distdat3<-subset(distdat1,grepl("[0-9].D$",Sample))
# rename the Column, that both dataframes contain one column
distdat<-rename(distdat3, c("Origin.Colony"="Intruder"))
# PCA
pcaInput<-distdat[,c(3:72)]
rownames(pcaInput)<-distdat[,2]
distdat.pca<-prcomp(pcaInput,center=TRUE, scale =TRUE)
summary(distdat.pca)
# plot: PCA results
plot(distdat.pca)
#p<-ggbiplot(distdat.pca, obs.scale = 1, var.scale = 1, choices=c(1,2), ## which PCs to plot
#  var.axes=F, ## remove arrows
#  groups ="", ellipse = FALSE) + scale_color_discrete(name = '') +
#  theme_classic() + scale_color_manual(values=c("black"))+
#  theme(legend.position = "none")
#p
# save plot
#dev.print(pdf,"../Cardio_Paper/Manuscript/Figures/C.obscurior_PCA.pdf",width=6, height=3)
#dev.print(pdf,"~/Desktop/Cardio_Paper/PCA.pdf",width=6, height=3)
# calculating distance and switch matrix to column
## calculate distances across all CHCs
#m<-as.matrix(dist(distdat[,-c(1:26)],method = "manhattan"))
## subset to some CHCs
#m<-as.matrix(dist(distdat[,c(10:19)]))
# instead, use the Principle Components
#m<-as.matrix(dist(distdat.pca$x))
# instead, use only PC1
#m<-as.matrix(dist(distdat.pca$x[,1]))
## use the first 2 PCs
m<-as.matrix(factoextra::get_dist(distdat.pca$x[,c(1:2)],method = "manhattan"))
# rename cols and rows for the PCA matrix
colnames(m)<-distdat$Intruder
rownames(m)<-distdat$Intruder
#xy <- t(combn(colnames(m), 2))
#dfDistances<-data.frame(xy, dist=m[xy])
# stack distance matrix
dfDistances<-reshape2::melt(m,value.name = "dist")
# combine aggression data with CHC distances
dat$combination<-apply(dat[c('Intruder','RecipientCol')],1,paste,collapse="-")
# combine aggression data no own with CHC distances
datnoown$combination<-apply(datnoown[c('Intruder','RecipientCol')],1,paste,collapse="-")
dfDistances$combination<-apply(dfDistances[c('Var1','Var2')],1,paste,collapse="-")
# remove irrelevant columns
dfDistances<-subset(dfDistances,select = c("combination","dist"))
# remove spaces in both "combination" columns
dat$combination<-gsub(" ","",dat$combination)
datnoown$combination<-gsub(" ","",datnoown$combination)
dfDistances$combination<-gsub(" ","",dfDistances$combination)
# save distance table
#write.csv(dfDistances,"/Library/Interner_Speicher/Uni/Cardiocondyla.obscurior/FGM.CardioAssays/0_data/manual/DistData.csv", row.names= FALSE)
#merge dataframes
# no own Colony
NOfullDF<-merge(datnoown,dfDistances,by="combination",all.x=T,all.y=F)
# all colonies
fullDF<-merge(dat,dfDistances,by="combination",all.x=T,all.y=F)
# split the data
# all treatments (agg-queens) and colonies
fulldata<-rename(fullDF, c("dist"="CHCdist"))
# all treatments, no own colony
NOfulldata<-rename(NOfullDF, c("dist"="CHCdist"))
# create data frames for Agg~CHCDistance Plot
# living and untreated (agg-CHCdist*queens), all colonies
datlivinguntreated<-subset(fulldata, Queens %in% c("living queens","untreated queens"))
# living and untreated (agg-CHCdist*queens), no own colony
#NOdatlivinguntreated<-subset(NOfulldata, Queens %in% c("living queens","untreated queens"))
# extract relevant vectors for polr model
# remove manipulated treatment from fulldata
fulldat<-subset(fulldata, Queens %in% c("washed queens","untreated queens", "living queens"))
# all treatments (agg-queens)
agg<-as.factor(fulldat$Aggression)
#CHCdistance<-fulldata$CHCdist
# simplify Queens vector a bit
queens<-as.factor(gsub(".queens","",as.character(fulldat$Queens),perl=T))
queens<-factor(queens,levels=c("washed","untreated","living"))
# compute "Ordered Logistic Regression" model with polr
#  only treatment (treatment influences aggression)
m<-(polr(agg~queens))
# summary(m)
ctable <- round(coef(summary(m)),3)
pval.raw <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
pval<- round(pval.raw,3)
ctable <- cbind(ctable, "p" = pval,"sign"=ifelse(pval<0.05,"*",""))
# save table
#write.csv(ctable,"../Cardio_Paper/Manuscript/Figures/C.obscurior_CHCdist.csv", row.names = TRUE,quote = F)
#write.csv(ctable,"../results/C.obscurior_CHCdist.csv", row.names = TRUE,quote = F)
#Compute confusion table and misclassification error
#  only treatment (treatment influences aggression)
predictrAggression = predict(m,fulldat)
table(fulldat$Aggression, predictrAggression)
predictrAggression[is.na(predictrAggression)]<-1
mean(as.character(fulldat$Aggression) != as.character(predictrAggression))
# interpretation of ordinal regression
# show table treatment
as.data.frame(ctable)
kable(ctable,caption = "Results of `polr` ordinal regression model `agg~queens`.")
# plot: treatment/aggression
plot(allEffects(m),
main="Treatment~Aggression",
ylab="Probability",
#xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
#dev.print(pdf,"~/Desktop/Cardio_Paper/Manuscript/Figures/C.obscurior_polrModel.pdf",width=8, height=4)
dev.print(pdf,"../results/C.obscurior_treatment.pdf",width=5, height=4)
# treatment
#posthoc<-summary(glht(m, mcp(queens = "Tukey")))
posthoc<- summary(glht(m, linfct=mcp(queens = "Tukey")),test=adjusted("bonferroni"))
posthoc
#save table
#write.csv(posthoc,"~/Desktop/Cardio_Paper/C.obscurior_CHCdist.csv", row.names = TRUE,quote = F)
# extract relevant vectors for polr model
# living and untreated (agg-CHCdist*queens)
agg1 <- as.factor(datlivinguntreated$Aggression)
CHCdistance1<-datlivinguntreated$CHCdist
# simplify Queens vector a bit
queens<-as.factor(gsub(".queens","",as.character(datlivinguntreated$Queens),perl=T))
queens<-factor(queens,levels=c("untreated","living"))
# compute "Ordered Logistic Regression" model with polr
# only living and untreated queens (CHCdist influences aggression)
q<-(polr(agg1~CHCdistance1*queens))
# summary(m)
ctableq <- round(coef(summary(q)),3)
pval.raw <- pnorm(abs(ctableq[, "t value"]), lower.tail = FALSE) * 2
pval<- round(pval.raw,3)
ctableCHC <- cbind(ctableq, "p" = pval,"sign"=ifelse(pval<0.05,"*",""))
# save table
#write.csv(ctable,"../Cardio_Paper/Manuscript/Figures/C.obscurior_CHCdist.csv", row.names = TRUE,quote = F)
#write.csv(ctable,"../results/C.obscurior_CHCdist.csv", row.names = TRUE,quote = F)
#Compute confusion table and misclassification error
# only living and untreated queens (CHCdist influences aggression)
predictrAggression = predict(q,datlivinguntreated)
table(datlivinguntreated$Aggression, predictrAggression)
predictrAggression[is.na(predictrAggression)]<-1
mean(as.character(datlivinguntreated$Aggression) != as.character(predictrAggression))
# Interpretation of ordinal regression
# show table chcdist
kable(ctableCHC,caption = "Results of `polr` ordinal regression model `agg1~CHCdistance1*queens` for `untreated` and `living` queens (i.e. unmanipulated CHCs).")
# plot: CHC distance/aggression
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
#dev.print(pdf,"~/Desktop/Cardio_Paper/Manuscript/Figures/C.obscurior_polrModel.pdf",width=8, height=4)
dev.print(pdf,"../results/C.obscurior_CHCdist.pdf",width=6, height=4)
# CHCdist
#summary(glht(q, mcp(queens = "Tukey")))
summary(glht(q, linfct=mcp(queens = "Tukey")),test=adjusted("bonferroni"))
library(tidyverse)
colonies<-read.csv("../data/colonies.tsv",sep="\t")
colonies$ID<-paste(substr(colonies$Location,1,3),gsub(".*-","",colonies$Sample),sep="")
gps<-gsub("\\(|\\)","",colonies$GPS) %>% strsplit(.,",")
names(gps)<-colonies$ID
fulldat$GPSdistance<-NA
for(i in 1:nrow(fulldat)){
int<-gsub(".*-","",fulldat$combination[i])
res<-gsub("-.*","",fulldat$combination[i])
fulldat$GPSdistance[i]<-distVincentyEllipsoid(p1 = as.numeric(gps[[int]]),p2=as.numeric(gps[[res]]))
}
library(geosphere)
fulldat$GPSdistance<-NA
for(i in 1:nrow(fulldat)){
int<-gsub(".*-","",fulldat$combination[i])
res<-gsub("-.*","",fulldat$combination[i])
fulldat$GPSdistance[i]<-distVincentyEllipsoid(p1 = as.numeric(gps[[int]]),p2=as.numeric(gps[[res]]))
}
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
q<-(polr(fulldat$Aggression~fulldat$CHCdistance1*queens))
fulldat$GPSdistance
q<-(polr(fulldat$Aggression~fulldat$CHCdistance1*queens))
q<-(polr(fulldat$Aggression~fulldat$CHCdistance1*fulldat$queens))
fulldat$queens
fulldat$Queens
q<-(polr(fulldat$Aggression~fulldat$CHCdistance1*fulldat$Queens))
q<-(polr(fulldat$Aggression~fulldat$CHCdist*fulldat$Queens))
q<-(polr(fulldat$Aggression~fulldat$CHCdist*as.factor(fulldat$Queens)))
q<-(polr(as.factor(fulldat$Aggression)~fulldat$CHCdist*as.factor(fulldat$Queens)))
q
plot(q)
summary(q)
plot(allEffects(q))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
a<-as.factor(fulldat$Aggression)
chc<-fulldat$CHCdist
queens<-as.factor(fulldat$Queens)
q<-polr(a~chc*queens)
plot(allEffects(q))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
a<-as.factor(fulldat$Aggression)
chc<-fulldat$CHCdist
queens<-as.factor(fulldat$Queens)
q<-polr(a~chc*queens)
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
a<-as.factor(fulldat$Aggression)
gpsd<-fulldat$GPSdistance
queens<-as.factor(fulldat$Queens)
q<-polr(a~gpsd*queens)
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
gpsd
plot(allEffects(q))
gpsd
is.na(gpsd)
sum(is.na(gpsd))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens=="living queens"))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens=="living queens")
a<-as.factor(sub$Aggression)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd*queens)
plot(allEffects(q))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens")
a<-as.factor(sub$Aggression)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd*queens)
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
plot(allEffects(q))
mean(gpsd)
gpsd
q<-polr(a~gpsd)
q
plot(allEffects(q))
q
summary(q)
length(gpsd)
length(a)
head(sub)
tail(sub)
View(sub)
plot(sub$GPSdistance,sub$CHCdist)
summary(lm(sub$GPSdistance~sub$CHCdist))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0)
a<-as.factor(sub$Aggression)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd)
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
summary(lm(sub$GPSdistance~sub$CHCdist))
plot(sub$GPSdistance~sub$CHCdist)
head(fulldat)
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0 & comb =="Ita-Ita")
a<-as.factor(sub$Aggression)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd)
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0 & comb =="Una-Una")
a<-as.factor(sub$Aggression)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd)
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
plot(allEffects(q),
#legend(list(key.args=list(title="aggression"))),
#theme(legend.position="top", legend.direction="horizontal"),
main="CHCdistance*treatment",
ylab="Probability",
xlab="CHC distance",
type="probability",
style="stacked",
colors=colorRampPalette(c("white","steelblue"))(9),
lattice=list(key.args=list(title="aggression",space="right")))
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0)# & comb =="Una-Una")
a<-as.factor(sub$Aggression)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd*comb)
ggplot(subset(fulldat,Queens=="living queens"))+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0)# & comb =="Una-Una")
a<-as.factor(sub$Aggression)
co<-as.factor(sub$comb)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
q<-polr(a~gpsd*comb)
q<-polr(a~gpsd*co)
plot(allEffects(q))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0)# & comb =="Una-Una")
a<-as.factor(sub$Aggression)
co<-as.factor(sub$comb)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
ggplot(sub)+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0 & comb =="Una-Una")
a<-as.factor(sub$Aggression)
co<-as.factor(sub$comb)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
ggplot(sub)+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
sub<-subset(fulldat,Queens!="washed queens" & CHCdist>0 & comb =="Ita-Ita")
a<-as.factor(sub$Aggression)
co<-as.factor(sub$comb)
gpsd<-sub$GPSdistance
queens<-as.factor(sub$Queens)
ggplot(sub)+geom_point(aes(x=GPSdistance,y=jitter(Aggression),col=comb))+geom_smooth(aes(x=GPSdistance,y=jitter(Aggression)))
gps
colonies
gps
do.call(gps,rbind)
do.call(rbind, gps)
df<-do.call(rbind,gps)
df<-data.frame(do.call(rbind,gps))
df
ggplot(df)+geom_point(x=X1,y=X2)
df
df$X1
df$X2
ggplot(df)+geom_point(aes(x=as.numeric(X1),y=as.numeric(X2)))
ggplot(df)+geom_point(aes(x=jitter(as.numeric(X1)),y=jitter(as.numeric(X2))))
ggplot(df)+geom_point(aes(x=jitter(as.numeric(X1)),y=jitter(as.numeric(X2))),alpha=.1
)
df<-data.frame(do.call(rbind,gps))
ggplot(df)+geom_point(aes(x=jitter(as.numeric(X1)),y=jitter(as.numeric(X2))),alpha=.5)
ggplot(df)+geom_point(aes(x=jitter(as.numeric(X1)),y=jitter(as.numeric(X2))),alpha=.5)+xlim(-15.3,-15.2)
ggplot(df)+geom_point(aes(x=jitter(as.numeric(X1)),y=jitter(as.numeric(X2))),alpha=.5)+xlim(-15.3,-15.2)+ylim(-39.05,-39)
25*(1:5)
